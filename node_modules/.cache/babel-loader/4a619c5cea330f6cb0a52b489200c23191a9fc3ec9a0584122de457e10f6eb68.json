{"ast":null,"code":"var _jsxFileName = \"D:\\\\Prathiba\\\\localClouflare\\\\src\\\\TrafficChange.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TrafficChange() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch('https://raw.githubusercontent.com/lauragift21/hiring-submission-data/main/internet-traffic.csv');\n      const text = await response.text();\n      const rows = text.split('\\n');\n      const headers = rows[0].split(',');\n      const rawData = rows.slice(1).map(row => {\n        const values = row.split(',');\n        return headers.reduce((obj, header, i) => {\n          obj[header] = values[i];\n          return obj;\n        }, {});\n      });\n      const chartData = rawData.slice(-30).map(d => ({\n        time: d.Time,\n        totalTrafficChange: parseInt(d['Total Traffic Change']),\n        httpTrafficChange: parseInt(d['HTTP Traffic Change'])\n      }));\n      console.log('Fetched data:', chartData);\n      setData(chartData);\n    }\n    fetchData();\n  }, []);\n  useEffect(() => {\n    console.log('Data changed:', data);\n    if (Chart.getChart('traffic-chart')) {\n      Chart.getChart('traffic-chart').destroy();\n    }\n    const chartData = {\n      labels: data.map(d => d.time),\n      datasets: [{\n        label: 'Total Traffic Change',\n        data: data.map(d => d.totalTrafficChange),\n        fill: false,\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      }, {\n        label: 'HTTP Traffic Change',\n        data: data.map(d => d.httpTrafficChange),\n        fill: false,\n        borderColor: 'rgb(255, 99, 132)',\n        tension: 0.1\n      }]\n    };\n    const chartConfig = {\n      type: 'line',\n      data: chartData\n    };\n    const chartCanvas = document.getElementById('traffic-chart');\n    new Chart(chartCanvas, chartConfig);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\",\n        fontWeight: \"bold\"\n      },\n      children: \"Traffic Change\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"The data in improper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"traffic-chart\",\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n_s(TrafficChange, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = TrafficChange;\nexport default TrafficChange;\nvar _c;\n$RefreshReg$(_c, \"TrafficChange\");","map":{"version":3,"names":["React","useState","useEffect","Chart","jsxDEV","_jsxDEV","TrafficChange","_s","data","setData","fetchData","response","fetch","text","rows","split","headers","rawData","slice","map","row","values","reduce","obj","header","i","chartData","d","time","Time","totalTrafficChange","parseInt","httpTrafficChange","console","log","getChart","destroy","labels","datasets","label","fill","borderColor","tension","chartConfig","type","chartCanvas","document","getElementById","children","style","textAlign","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","id","height","_c","$RefreshReg$"],"sources":["D:/Prathiba/localClouflare/src/TrafficChange.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Chart from 'chart.js/auto';\r\n\r\nfunction TrafficChange() {\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const response = await fetch('https://raw.githubusercontent.com/lauragift21/hiring-submission-data/main/internet-traffic.csv');\r\n            const text = await response.text();\r\n            const rows = text.split('\\n');\r\n            const headers = rows[0].split(',');\r\n            const rawData = rows.slice(1).map((row) => {\r\n                const values = row.split(',');\r\n                return headers.reduce((obj, header, i) => {\r\n                    obj[header] = values[i];\r\n                    return obj;\r\n                }, {});\r\n            });\r\n            const chartData = rawData.slice(-30).map((d) => ({\r\n                time: d.Time,\r\n                totalTrafficChange: parseInt(d['Total Traffic Change']),\r\n                httpTrafficChange: parseInt(d['HTTP Traffic Change']),\r\n            }));\r\n            console.log('Fetched data:', chartData);\r\n            setData(chartData);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log('Data changed:', data);\r\n        if (Chart.getChart('traffic-chart')) {\r\n            Chart.getChart('traffic-chart').destroy();\r\n        }\r\n\r\n        const chartData = {\r\n            labels: data.map((d) => d.time),\r\n            datasets: [\r\n                {\r\n                    label: 'Total Traffic Change',\r\n                    data: data.map((d) => d.totalTrafficChange),\r\n                    fill: false,\r\n                    borderColor: 'rgb(75, 192, 192)',\r\n                    tension: 0.1,\r\n                },\r\n                {\r\n                    label: 'HTTP Traffic Change',\r\n                    data: data.map((d) => d.httpTrafficChange),\r\n                    fill: false,\r\n                    borderColor: 'rgb(255, 99, 132)',\r\n                    tension: 0.1,\r\n                },\r\n            ],\r\n        };\r\n\r\n        const chartConfig = {\r\n            type: 'line',\r\n            data: chartData,\r\n        };\r\n\r\n        const chartCanvas = document.getElementById('traffic-chart');\r\n        new Chart(chartCanvas, chartConfig);\r\n    }, [data]);\r\n\r\n    return (\r\n        <div>\r\n            <h2 style={{ textAlign: \"center\", fontWeight: \"bold\" }}>Traffic Change</h2>\r\n            <p style={{ textAlign: \"center\" }}>The data in improper</p>\r\n            <canvas id=\"traffic-chart\" style={{ height: '100px' }}></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TrafficChange;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}